<?php
class ModelToolImage extends Model {
	public function resize($filename, $width, $height,$default='') {

		$extension = pathinfo($filename, PATHINFO_EXTENSION);

		$old_image = $filename;
		// add by yagami s3 20161206 begin
		if ($this->config->get('amazon_s3_status')) {
		    $status = $this->amazons3->s3FileExists($old_image) ? 1:0;
		    if (!$status) {
		        return;
		    }
		    $newImage = 'cache/' . utf8_substr($filename, 0, utf8_strrpos($filename, '.')) . '-' . $width . 'x' . $height . '.' . $extension;
		
		    if ($this->config->get('amazon_s3_cloudfront_status')) {
		        if ($this->config->get('amazon_s3_cloudfront_custom_domain')) {
		            $imageUrl = '//' . $this->config->get('amazon_s3_cloudfront_custom_domain') .
		            $this->config->get('amazon_s3_bucket_path') . 'image/' . urlencode($newImage);
		        } else {
		            $imageUrl = '//' . $this->config->get('amazon_s3_cloudfront_domain') . '.cloudfront.net' .
		                $this->config->get('amazon_s3_bucket_path') . 'image/' . urlencode($newImage);
		        }
		    } else {
		        $imageUrl = '//' . $this->config->get('amazon_s3_bucket') . '.s3.amazonaws.com' .
		            $this->config->get('amazon_s3_bucket_path') . 'image/' . urlencode($newImage);
		    }
		    if (!$this->amazons3->fileExists($newImage)) {
		        $image = new Image('http://' . $this->config->get('amazon_s3_bucket') . '.s3.amazonaws.com' .
		            $this->config->get('amazon_s3_bucket_path') . 'image/' . urlencode($old_image),$status);
		        $image->resize($width, $height,$default);
		        $imageContent = $image->getRawBytes();
		
		        $data = array(
		            'path' => $this->config->get('amazon_s3_bucket_path') . 'image/',
		            'bucket' => $this->config->get('amazon_s3_bucket'),
		            'name' => $newImage,
		            'content' => $imageContent,
		            'mime' => $image->getMimeType(),
		        );
		        
		        if ($this->amazons3->upload($data, 'image')) {
		            return $imageUrl;
		        }
		
		        // Upload failed;
		        $log = new Log('amazon_s3.log');
		        $log->write('Failed to upload image ' . $newImage);
		    } else {
		        return $imageUrl;
		    }
		}
		// add by yagami s3 20161206 end
		if (!is_file(DIR_IMAGE . $filename)) {
		    return;
		}
		
		$new_image = 'cache/' . utf8_substr($filename, 0, utf8_strrpos($filename, '.')) . '-' . $width . 'x' . $height . '.' . $extension;

		
		//Yul
		if($extension == 'gif'){
		    require_once DIR_SYSTEM . "library/gif_resize.php";
		    $gr = new gifresizer;
		    $gr->temp_dir = DIR_IMAGE . 'cache';
		    $gr->resize(DIR_IMAGE . $old_image , DIR_IMAGE . $new_image,$width, $height);
		    
		}elseif (!is_file(DIR_IMAGE . $new_image) || (filectime(DIR_IMAGE . $old_image) > filectime(DIR_IMAGE . $new_image))) {
		    
			$path = '';

			$directories = explode('/', dirname(str_replace('../', '', $new_image)));

			foreach ($directories as $directory) {
				$path = $path . '/' . $directory;

				if (!is_dir(DIR_IMAGE . $path)) {
					@mkdir(DIR_IMAGE . $path, 0777);
				}
			}

			list($width_orig, $height_orig) = getimagesize(DIR_IMAGE . $old_image);

			if ($width_orig != $width || $height_orig != $height) {
				$image = new Image(DIR_IMAGE . $old_image);
				$image->resize($width, $height,$default);
				$image->save(DIR_IMAGE . $new_image);
			} else {
				copy(DIR_IMAGE . $old_image, DIR_IMAGE . $new_image);
			}
		}

		if ($this->request->server['HTTPS']) {
			return $this->config->get('config_ssl') . 'image/' . $new_image;
		} else {
			return $this->config->get('config_url') . 'image/' . $new_image;
		}
	}
	
	public function profileResize($filename, $width, $height) {
		if ($this->config->get('amazon_s3_status')) {
		    $img_px1 = getimagesize(DIR_S3IMAGE . $filename);
		}else{
		    if (!is_file(DIR_IMAGE . $filename)) {
		        $filename = 'no_image.jpg';
		    }
		 $img_px1 = getimagesize(DIR_IMAGE . $filename);
		}
		$image_defualt = '';
		if($img_px1[0]>$img_px1[1]){
			$image_defualt = 'h';
		}elseif($img_px1[0]<$img_px1[1]){
			$image_defualt = 'w';
		}
		return $this->resize($filename,$width,$height,$image_defualt);
	}
	public function upload($data = array()) {
		$this->load->language('tool/upload');
		$this->load->model('tool/optimizer');
		$json = array();
		// Check its a directory
		if (!is_dir(DIR_IMAGE.$data['directory'])) {
		    mkdir(DIR_IMAGE.$data['directory'],0777);
		}
		if (empty($data['files'])) {
			$json['error'] = $this->language->get('empty_files');
		}
		if (!$json) {
			$json['count'] = count($data['files']['name']);
			for($i = 0; $i < $json['count']; $i++){
				if (!empty($data['files']['name'][$i]) && is_file($data['files']['tmp_name'][$i])) {
					// Sanitize the filename
					$filename = basename(html_entity_decode($data['files']['name'][$i], ENT_QUOTES, 'UTF-8'));
					 
					// Validate the filename length
					if ((utf8_strlen($filename) < 3) || (utf8_strlen($filename) > 255)) {
						$json['images'][$i]['error'] = $this->language->get('error_filename');
					}
						
					// Allowed file extension types
					$allowed = array(
							'jpg',
							'jpeg',
							'gif',
							'png',
							'bmp'
					);
						
					if (!in_array(utf8_strtolower(utf8_substr(strrchr($filename, '.'), 1)), $allowed)) {
						$json['images'][$i]['error'] = $this->language->get('error_filetype');
					}
						
					// Allowed file mime types
					$allowed = array(
							'image/jpeg',
							'image/pjpeg',
							'image/png',
							'image/x-png',
							'image/gif',
							'image/bmp'
					);
						
					if (!in_array($data['files']['type'][$i], $allowed)) {
						$json['images'][$i]['error'] = $this->language->get('error_filetype');
					}
	
					$fp = fopen($data['files']['tmp_name'][$i], "rb");
					$bin = fread($fp, 2);
					fclose($fp);
					$str_info  = @unpack("C2chars", $bin);
					$type_code = intval($str_info['chars1'].$str_info['chars2']);
					$allowed = array(
							'255216',//jpg
							'13780',//png
							'7173',//gif
							'6677'//bmp
					);
					if (!in_array($type_code, $allowed)) {
						$json['images'][$i]['error'] = $this->language->get('error_filetype');
					}
						
					if (filesize($data['files']['tmp_name'][$i])>$data['limit_size']) {
						$json['images'][$i]['error'] = $this->language->get('error_filesize').($data['limit_size']/1048576)."MB";
					}
				} else {
					$json['images'][$i]['error'] = $this->language->get('error_upload');
				}
	
				if (!isset($json['images'][$i]['error'])) {
					$url = $data['directory'] . time(). rand(1000,9999) . utf8_strtolower(strrchr($filename, '.'));
					/*  if($this->config->get('amazon_s3_status')){
						$image = new Image($data['files']['tmp_name'][$i]);
						if(isset($data['size'])){
							if($image->getWidth() > $image->getHeight()){
								$data['width'] = $data['size'];
								$data['height'] = $data['size'] * $image->getHeight() / $image->getWidth();
								//$data['size'] = 'w';
							}else{
								$data['width'] = $data['size'] * $image->getWidth() / $image->getHeight();
								$data['height'] = $data['size'];
								//$data['size'] = 'h';
							}
							$image->resize($data['width'], $data['height'], $data['size']);
						}
						$imageContent = $image->getRawBytes();
						$s3data = array(
								'path' => $this->config->get('amazon_s3_bucket_path') . 'image/',
								'bucket' => $this->config->get('amazon_s3_bucket'),
								'name' => $url,
								'content' => $imageContent,
								'mime' => $image->getMimeType(),
						);
						if (!$this->amazons3->upload($s3data, 'image')) {
							$json['images'][$i]['error'] = 'Upload to s3 failed!';
						}
						$json['images'][$i]['url'] = $url;
					} else {
					}  */
						move_uploaded_file($data['files']['tmp_name'][$i], DIR_IMAGE . $url);
						//$this->model_tool_optimizer->myoptimizer(DIR_IMAGE.$url);
						chmod(DIR_IMAGE.$url,0400);
						$json['images'][$i]['url'] = $url;
					$json['images'][$i]['success'] = $this->language->get('text_upload');
				}else{
					break;
				}
			}
		}
		return $json;
	}
}
