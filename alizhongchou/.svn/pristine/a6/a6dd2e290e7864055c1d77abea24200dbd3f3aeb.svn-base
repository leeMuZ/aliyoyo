<?php
class ModelToolImage extends Model {
	public function resize($filename, $width, $height) {

		$extension = pathinfo($filename, PATHINFO_EXTENSION);

		$old_image = $filename;
		// add by yagami s3 20161206 begin
		if ($this->config->get('amazon_s3_status')) {
		    $status = $this->amazons3->s3FileExists($old_image) ? 1:0;
		    if (!$status) {
		        return;
		    }
		    $newImage = 'cache/' . utf8_substr($filename, 0, utf8_strrpos($filename, '.')) . '-' . $width . 'x' . $height . '.' . $extension;
		    if ($this->config->get('amazon_s3_cloudfront_status')) {
		        if ($this->config->get('amazon_s3_cloudfront_custom_domain')) {
		            $imageUrl = '//' . $this->config->get('amazon_s3_cloudfront_custom_domain') .
		            $this->config->get('amazon_s3_bucket_path') . 'image/' . urlencode($newImage);
		        } else {
		            $imageUrl = '//' . $this->config->get('amazon_s3_cloudfront_domain') . '.cloudfront.net' .
		                $this->config->get('amazon_s3_bucket_path') . 'image/' . urlencode($newImage);
		        }
		    } else {
		        $imageUrl = '//' . $this->config->get('amazon_s3_bucket') . '.s3.amazonaws.com' .
		            $this->config->get('amazon_s3_bucket_path') . 'image/' . urlencode($newImage);
		    }
		    if (!$this->amazons3->fileExists($newImage)) {
		        $image = new Image('http://' . $this->config->get('amazon_s3_bucket') . '.s3.amazonaws.com' .
		            $this->config->get('amazon_s3_bucket_path') .'image/' .urlencode($old_image),$status);
		        $image->resize($width, $height);
		        $imageContent = $image->getRawBytes();
		
		        $data = array(
		            'path' => $this->config->get('amazon_s3_bucket_path') . 'image/',
		            'bucket' => $this->config->get('amazon_s3_bucket'),
		            'name' => $newImage,
		            'content' => $imageContent,
		            'mime' => $image->getMimeType(),
		        );
		        if ($this->amazons3->upload($data, 'image')) {
		            return $imageUrl;
		        }
		
		        // Upload failed;
		        $log = new Log('amazon_s3.log');
		        $log->write('Failed to upload image ' . $newImage);
		    } else {
		        return $imageUrl;
		    }
		}
		if (!is_file(DIR_IMAGE . $filename)) {
		    return;
		}
		$new_image = 'cache/' . utf8_substr($filename, 0, utf8_strrpos($filename, '.')) . '-' . $width . 'x' . $height . '.' . $extension;
		
		//Yul
		if($extension == 'gif'){
		    require_once DIR_SYSTEM . "library/gif_resize.php";
		    $gr = new gifresizer;
		    $gr->temp_dir = DIR_IMAGE . 'cache';
		    $gr->resize(DIR_IMAGE . $old_image , DIR_IMAGE . $new_image,$width, $height);
		    
		}elseif (!is_file(DIR_IMAGE . $new_image) || (filectime(DIR_IMAGE . $old_image) > filectime(DIR_IMAGE . $new_image))) {
			$path = '';

			$directories = explode('/', dirname(str_replace('../', '', $new_image)));

			foreach ($directories as $directory) {
				$path = $path . '/' . $directory;

				if (!is_dir(DIR_IMAGE . $path)) {
					@mkdir(DIR_IMAGE . $path, 0777);
				}
			}

			   
			list($width_orig, $height_orig) = getimagesize(DIR_IMAGE . $old_image);

			if ($width_orig != $width || $height_orig != $height) {
				$image = new Image(DIR_IMAGE . $old_image);
				$image->resize($width, $height);
				$image->save(DIR_IMAGE . $new_image);
			} else {
				copy(DIR_IMAGE . $old_image, DIR_IMAGE . $new_image);
			}
		}

		if ($this->request->server['HTTPS']) {
			return HTTPS_CATALOG . 'image/' . $new_image;
		} else {
			return HTTP_CATALOG . 'image/' . $new_image;
		}
	}
}
