<?php
/**
 * Created by PhpStorm.
 * User: alice
 * Date: 2017/4/26
 * Time: 11:20
 */

function cmp_by_optionNumber($a, $b) {
    return $a["sort"] - $b["sort"];
}
class ControllerModuleFutureHome extends Controller
{
    public function index($setting = array())
    {
        $this->load->model('tool/image');
        $this->load->model('account/future');
       /* $data['modules'] = $this->model_account_future->GetModuleFuture('future_home_module');
        foreach ($data['modules'] as $k=>$v):
            $data['modules']['value'] = json_decode($v, true);
        endforeach;
        $setting  =  $data['modules']['value'];*/
       if ($setting['status']==1) {
           $data['position'] = $setting['position'];
           $data['disable_on_mobile'] = $setting['disable_on_mobile'];
           $data['custom_class'] = $setting['custom_class'];
           $data['margin_top'] = $setting['margin_top'];
           $data['margin_right'] = $setting['margin_right'];
           $data['margin_bottom'] = $setting['margin_bottom'];
           $data['margin_left'] = $setting['margin_left'];
           $data['padding_top'] = $setting['padding_top'];
           $data['padding_right'] = $setting['padding_right'];
           $data['padding_bottom'] = $setting['padding_bottom'];
           $data['padding_left'] = $setting['padding_left'];
           $data['force_full_width'] = $setting['force_full_width'];
           $data['background_color'] = $setting['background_color'];
           $data['background_image_type'] = $setting['background_image_type'];
           $data['background_image'] = $setting['background_image'];
           $data['background_image_position'] = $setting['background_image_position'];
           $data['background_image_repeat'] = $setting['background_image_repeat'];
           $data['background_image_attachment'] = $setting['background_image_attachment'];
           $data['id'] = rand(0, 5000) * rand(5000, 50000);
           $data['columns'] = array();
           if (!empty($setting['column']))
           {
               foreach ($setting['column'] as $column) {
                   if ($column['status'] == 1) {
                       if (!isset($column['module'])) $column['module'] = array();
                       $data['columns'][] = array(
                           'width' => $column['width'],
                           'disable_on_mobile' => $column['disable_on_mobile'],
                           'sort' => $column['sort'],
                           'width_xs' => $column['width_xs'],
                           'width_sm' => $column['width_sm'],
                           'width_md' => $column['width_md'],
                           'width_lg' => $column['width_lg'],
                           'modules' => $column['module']
                       );
                   }
               }
           }
           //var_dump($setting);exit;
           usort($data['columns'], "cmp_by_optionNumber");


           foreach ($data['columns'] as $k => $v)
           {
               if ($v['modules']) {
                   foreach ($v['modules'] as $kk => $vv) {
                       if ($vv['status'] == 1) {
                           //$data['page_data'] = array();
                           $tpl = "";
                           $tpl .= $vv['type'] . '/';
                           if ($data['position'] == "other" && isset($vv[$vv['type']]['module_layout']) && $vv[$vv['type']]['module_layout'] == 'product.tpl' && $vv['type'] == 'future_home') {
                               $tpl .= 'recommend.tpl';

                           } else {

                               if ($vv['type'] == 'future_category') {
                                   $tpl .= isset($vv[$vv['type']]['module_layout']) ? $vv[$vv['type']]['module_layout'] : 'index.tpl';
                               } else {
                                   $tpl .= isset($vv[$vv['type']]['module_layout']) ? $vv[$vv['type']]['module_layout'] : 'default.tpl';
                               }

                           }
                           // $tpl .= isset($vv[$vv['type']]['module_layout']) ? $vv[$vv['type']]['module_layout'] : 'default.tpl';
                           $tpl = substr($tpl, 0, strpos($tpl, "."));
                           if (isset($vv[$vv['type']]['array'])) {
                               foreach ($vv[$vv['type']]['array'] as $k3 => $v3) {
                                   if (isset($v3['product_image'])) {
                                       if ($vv[$vv['type']]['module_layout'] == "default.tpl") {
                                           $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['product_image'] = $this->image_ajax($v3['product_image'], 280, 170);
                                       }

                                       if ($vv[$vv['type']]['module_layout'] == "product.tpl") {
                                           $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['product_image'] = $this->image_ajax($v3['product_image'], 500, 500);
                                       }

                                   }
                                   if (isset($v3['image'])) {
                                       if ($vv['type'] == "future_carousel") {
                                           $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['image'] = $this->image_ajax($v3['image'], 1920, 650);
                                       }
                                       if ($vv['type'] == "future_category") {
                                           $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['image'] = $this->image_ajax($v3['image'], 300, 300);
                                       }
                                       if ($vv['type'] == "future_product") {
                                           //$data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['image'] = $this->image_ajax($v3['image'], 500, 500);
                                           $check = pathinfo($data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['image']);
                                           $suffix = $check['extension'];
                                           $array = explode('.' . $suffix, $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['image']);
                                           $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['image'] = $this->image_ajax($v3['image'], 500, 500);
                                           $array = explode(HTTP_Aliyoyo, $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['link']);
                                           if (isset($array[1])) {
                                               $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['link'] = HTTP_Aliyoyo . $array[1];
                                           } else {
                                               $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['link'] = HTTP_Aliyoyo . $array[0];
                                           }
                                           // $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['image'] = "http://www.aliyoyo.com/image/cache/" . $array[0] . '-500x500' . '.' . $suffix;
                                           // $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['link'] = "http://www.aliyoyo.com/" . explode("http://{$_SERVER['HTTP_HOST']}/", $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['link'])[1];
                                       }
                                   }
                                   if (isset($v3['funding_id'])) {
                                       $v3['product_id'] = $v3['funding_id'];
                                       $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['url'] = $this->url->link('crowdfunding/campaign', 'funding_id=' . $v3['funding_id']);
                                   }
                                   if (isset($v3['category_id'])) {
                                       $v3['product_id'] = $v3['category_id'];
                                   }
                                   $data['columns'][$k]['modules'][$kk][$vv['type']]['array'][$k3]['price'] = method_exists($this, $vv['type']) ? $this->$vv['type']($v3["product_id"]) : "";

                                   if (empty($data['columns']['modules'][$kk]['price'])) {
                                       unset($data['columns']['modules'][$kk]['price']);
                                   }
                               }
                           }
                           $layouts[$vv['sort']] = $this->load->view("module/future_home/" . $tpl, $data['columns'][$k]['modules'][$kk]);

                       }
                   }

               }
           }
           if (isset($layouts)) {
               return $layouts;
           } else {
               return '';
           }

       }else{

           return '';

       }

    }

    public function getModules($modules) {
        //$this->load->model('account/wishlist');
        $output = array();

        if(!is_array($modules)) $modules = array();

        foreach($modules as $module) {
            if($module['status'] == 1) {
                $content = array();

                if($module['type'] == 'load_module') {
                    $content = array(
                        'module' => false
                    );

                    $part = explode('.', $module['load_module']['module']);

                    if (isset($part[0])) {
                        $code = $part[0];
                    }

                    if ($code) {
                        $setting = $this->config->get($code . '_module');

                        if (isset($part[1]) && isset($setting[$part[1]])) {
                            $content = array(
                                'module' => $this->load->controller('module/' . $code, $setting[$part[1]])
                            );
                        } else {
                            $content = array(
                                'module' => $this->load->controller('module/' . $module['load_module']['module'])
                            );
                        }
                    }
                }

                if($module['type'] == 'box') {
                    if(isset($module['module']['title'][$this->config->get('config_language_id')])) {
                        $content = array(
                            'title' => html_entity_decode($module['module']['title'][$this->config->get('config_language_id')], ENT_QUOTES, 'UTF-8'),
                            'text' => html_entity_decode($module['module']['text'][$this->config->get('config_language_id')], ENT_QUOTES, 'UTF-8')
                        );
                    } else {
                        $content = array(
                            'title' => 'Set name!',
                            'text' => 'You must set text in the module Advanced Grid!'
                        );
                    }
                }

                if($module['type'] == 'future_carousel') {
                    $content = $this->getCarouselModule($module, 999);
                }

               /* if($module['type'] == 'newsletter') {
                    $content = $this->getNewsletterModule($module, 999);
                }*/


                $output[] = array(
                    'sort' => $module['sort'],
                    'type' => $module['type'],
                    'content' => $content
                );
            }
        }

        usort($output, "cmp_by_optionNumber");

        return $output;
    }

    public function getCarouselModule($module = array())
    {
       if(isset($module['future_carousel']['title'][$this->config->get('config_language_id')]))
       {
           $title = $module['future_carousel']['title'][$this->config->get('config_language_id')];
       } else {
           $title = 'page my Carousel!';
       }

        $carousels = array();
       if (isset($module['future_carousel']['array']))
       {
           foreach ($module['future_carousel']['array'] AS $carousel)
           {
               if(isset($carousel['sort'][$this->config->get('config_language_id')])) {
                   $sort = $carousel['sort'][$this->config->get('config_language_id')];
               }else{
                   $sort = 1;
               }

               $carousels[] = array(
                   'sort' => $sort,
                   'link' => $carousel['link'],
                   'image'=> $carousel['image']
               );
           }
       }

       usort($carousels, "cmp_by_optionNumber");

       if(!isset($module['future_carousel']['module_layout'])) $module['future_carousel']['module_layout'] = 'default.tpl';
       $content = array(
            'module_template' => $module['future_carousel']['module_layout'],
             'carousel'       => $carousels
       );

       return $content;
    }

   public function future_product($product_id)
   {
       $this->load->model('crowdfunding/crowdfunding');
       $price = $this->model_crowdfunding_crowdfunding->find_aliyoyo_price($product_id);
       return $price['price'];
   }

    public function image_ajax($image, $width=100, $height=100)
    {

        $this->load->model('tool/image');
        if (is_file(DIR_IMAGE . $image)) {
            $image = $this->model_tool_image->resize($image, $width, $height);
        }  else {
            $image = $this->model_tool_image->resize('no_image.png', $width, $height);
        }
        return $image;

    }

    public function future_home($funding_id)
    {
        $this->load->model('crowdfunding/crowdfunding');
        $results = $this->model_crowdfunding_crowdfunding->find_crowdfunding_result($funding_id);
        return $results;
    }

    public function future_category($category_id)
    {
        return $this->url->link('account/assortment', 'url='. $category_id);
    }

    function array_to_object($arr) {
        if (gettype($arr) != 'array') {
            return;
        }
        foreach ($arr as $k => $v) {
            if (gettype($v) == 'array' || getType($v) == 'object') {
                $arr[$k] = (object)array_to_object($v);
            }
        }

        return (object)$arr;
    }

}